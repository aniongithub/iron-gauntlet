#! /bin/bash

echo "pre-activate hook for template: $DEVCONTAINER_NAME running in $PWD"

# https://www.davidpashley.com/articles/writing-robust-shell-scripts
# Fail on any errors
set -e

# Fail on unset variables
set -u

# Check all our pre-requisites here, fail if not available
# Check all our pre-requisites here, fail if not available
command -v ssh-keygen || { echo "Could not find ssh-keygen. Install it with apt-get install openssh-client"; exit 1; }
command -v ssh-copy-id || { echo "Could not find ssh-copy-id. Install it with apt-get install openssh-client"; exit 1; }
command -v docker || { echo "Could not find Docker! More info: https://docs.docker.com/install/"; exit 1; }
command -v docker-machine || { echo "Could not find docker-machine. More info: https://docs.docker.com/v17.09/machine/install-machine/"; exit 1; }
command -v jq || { echo "Could not find jq. More info: https://github.com/stedolan/jq/wiki/Installation"; exit 1; }
command -v dpipe || { echo "Could not find dpipe in package vde2. More info: https://packages.debian.org/jessie/vde2"; exit 1; }

REMOTE_MACHINE_NAME=${REMOTE_MACHINE_NAME?"Enter the hostname of the remote machine to create/use (ex: raspberrypi)"}

# Allow errors temporarily for our check
set +e
docker-machine ls -q | grep "^$REMOTE_MACHINE_NAME\$"
err=$?
set -e
if [ $err -eq 0 ]
then
    echo "Docker machine $REMOTE_MACHINE_NAME exists, re-using"
else
    # Allow errors temporarily for our check
    set +e
    ping -c4 $REMOTE_MACHINE_NAME
    err=$?
    set -e
    if [ $err -ne 0 ]
    then
        echo -n "Could not ping $REMOTE_MACHINE_NAME, please enter the IP address of the machine to connect to >"
        read REMOTE_MACHINE_IP
    else
        # Use the first IP address that's returned from getent. We're also specifically requesting an IPv4 address
        # https://unix.stackexchange.com/a/20793/358706
        REMOTE_MACHINE_IP=$(getent ahostsv4 $REMOTE_MACHINE_NAME | awk '{ print $1; exit }')
    fi

    # Create the ssh-key we're going to copy over and have docker-machine use
    REMOTE_HOST_KEY="/tmp/$REMOTE_MACHINE_NAME.id_rsa"
    echo -e 'y\n' | ssh-keygen -t rsa -b 4096 -f $REMOTE_HOST_KEY -q -N ""
    ssh-copy-id -f -i /tmp/$REMOTE_MACHINE_NAME.id_rsa ${REMOTE_USERNAME?"Enter the username to use on the remote machine (ex: pi)"}@$REMOTE_MACHINE_IP
    docker-machine create \
        --driver generic \
        --generic-ip-address="$REMOTE_MACHINE_IP" \
        --generic-ssh-user="$REMOTE_USERNAME" \
        --generic-ssh-key $REMOTE_HOST_KEY \
        $REMOTE_MACHINE_NAME
fi

# Either way, we have a docker-machine now
echo $REMOTE_MACHINE_NAME > "$PWD/.devcontainer/docker-machine.name"

# Ensure docker is installed on the Raspberry Pi
set +e
echo "Checking for docker on $REMOTE_MACHINE_NAME..."
docker-machine ssh $REMOTE_MACHINE_NAME \
    "which docker"
err=$?
set -e
if [ $err -ne 0 ]
then
    echo -n "Docker is not installed on $REMOTE_MACHINE_NAME, installing..."
    set -e
    docker-machine ssh $REMOTE_MACHINE_NAME \
        "curl -sSL https://get.docker.com/ | sh && sudo groupadd docker && sudo usermod -aG docker $REMOTE_USERNAME"
else
    echo "docker is installed, moving on."
fi

# Ensure sshfs is installed on the remote machine
set +e
echo "Checking for sshfs on $REMOTE_MACHINE_NAME..."
docker-machine ssh $REMOTE_MACHINE_NAME \
    "which sshfs"
err=$?
set -e
if [ $err -ne 0 ]
then
    echo -n "SSHFS is not installed on $REMOTE_MACHINE_NAME, installing..."
    # https://stackoverflow.com/a/27355109/802203
    docker-machine ssh $REMOTE_MACHINE_NAME \
        "sudo apt-get update;sudo apt-get install -y sshfs;mkdir -p /tmp/$DEVCONTAINER_NAME-$DEVCONTAINER_ID"
else
    echo "sshfs is installed, moving on."
fi

# Create our mount folder
docker-machine ssh $REMOTE_MACHINE_NAME \
    "mkdir -p /tmp/$DEVCONTAINER_NAME-$DEVCONTAINER_ID"


# Ensure user_allow_other is active
# https://stackoverflow.com/a/27355109/802203
docker-machine ssh $REMOTE_MACHINE_NAME "sudo sed -i '/user_allow_other/s/^#//g' /etc/fuse.conf"

# Note, needs vde2 installed
MOUNT_COMMAND="dpipe /usr/lib/openssh/sftp-server = docker-machine ssh $REMOTE_MACHINE_NAME sshfs :$PWD /tmp/$DEVCONTAINER_NAME-$DEVCONTAINER_ID -o reconnect -o slave -o allow_other"
# nohup the mount command and background it
nohup $MOUNT_COMMAND > "$PWD/.devcontainer/mount.log" 2>&1 &
echo $! > "$PWD/.devcontainer/rsshfs.pid"

SETTINGS=".vscode/settings.json"

# Create the settings file if it doesn't exist
[ -d ".vscode" ] || mkdir -p .vscode
[ -f $SETTINGS ] || echo "{}" > $SETTINGS

# Set the docker env for this hook
eval $(docker-machine env $REMOTE_MACHINE_NAME)

# Use jq to generate our VS Code settings file
echo "$( jq -M \
    --arg dockerHost "$DOCKER_HOST" \
    --arg dockerCertPath "$DOCKER_CERT_PATH" \
    --arg dockerMachineName "$REMOTE_MACHINE_NAME" \
    --arg dockerTlsVerify "$DOCKER_TLS_VERIFY" \
    '.["docker.host"]=$dockerHost|.["docker.certPath"]=$dockerCertPath|.["docker.machineName"]=$dockerMachineName|.["docker.tlsVerify"]=$dockerTlsVerify' $SETTINGS )" > $SETTINGS

# Note about variable placeholders
# If/when this script completes successfully, the SAVED devcontainer will contain the defaults the
# user entered this (mostly) ensures only valid values become defaults for subsequent activations